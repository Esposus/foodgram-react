name: foodgram_workflow

on:  [push]

jobs:

  send_message:
    runs-on: ubuntu-latest
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: The project has been successfully pushed to github !

  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r backend/requirements.txt
    - name: Test with flake8
      run: |
        python -m flake8  . --ignore I004,I001,I005,I003,R505,E501,R504,W503,W504 --exclude tests,migrations

  send_message_pep8:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: The project has been successfully tested with flake8 !

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub (backend)
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          context: backend/
      - name: Push to DockerHub (frontend)
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          context: frontend/

  send_message_docker:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: The project has been successfully pushed into Docker Hub !

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        # passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          sudo docker-compose stop
          sudo docker-compose rm backend
          sudo docker-compose rm frontend
          sudo systemctl stop nginx
          sudo systemctl disable nginx
          rm .env
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          sudo docker-compose up -d --build
          sudo docker-compose exec -T backend python manage.py migrate
          sudo docker-compose exec -T backend python manage.py collectstatic --no-input
          sudo docker rmi $(docker images -f dangling=true -q)

  send_message_deploy:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: The project has been successfully deployed to server !